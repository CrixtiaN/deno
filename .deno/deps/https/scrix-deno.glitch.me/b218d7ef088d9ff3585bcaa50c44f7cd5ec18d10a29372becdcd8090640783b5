import { factory } from "../class/mod.js";
import Object_ from "../object/mod.js";

const parseSeconds = function(seconds = 0) {
  let secs = Math.round(seconds);
  const days = Math.floor(secs / 86400);
  secs %= 86400;
  const hours = Math.floor(secs / 3600);
  secs %= 3600;
  const minutes = Math.floor(secs / 60);
  secs %= 60;
  return {
    days,
    hours,
    minutes,
    seconds: secs,
  };
};

class Seconds {
  #seconds;
  constructor(s = 0) {
    this.#seconds = s;
  }
  get to() {
    return this;
  }
  get milliseconds() {
    return this.seconds * 1000;
  }
  get seconds() {
    return Number(this.#seconds);
  }
  get minutes() {
    return this.seconds / 60;
  }
  get hours() {
    return this.minutes / 60;
  }
  get days() {
    return this.hours / 24;
  }
  toString() {
    const parsed = parseSeconds(this.seconds);
    return (
      Object.entries(parsed)
        .filter(([key, value]) => value > 0)
        .reduce((str, [key, value]) => `${str}${value}${key[0]}`, "") || "0s"
    );
  }
  valueOf() {
    return this.seconds;
  }
  static fromString(timeStr) {
    const getNumber = function(str, regex) {
      const match = str.match(regex);
      const number = match ? Number(match[0]) : 0;
      return number;
    };
    const days = getNumber(timeStr, /\d+(?=d)/) * 86400;
    const hours = getNumber(timeStr, /\d+(?=h)/) * 3600;
    const minutes = getNumber(timeStr, /\d+(?=m)/) * 60;
    const seconds = getNumber(timeStr, /\d+(?=s)/);
    return new Seconds(days + hours + minutes + seconds);
  }
}

class Time {
  #time;
  constructor(t) {
    this.#time = t;
  }
  get milliseconds() {
    return new Seconds(this.seconds / 1000);
  }
  get seconds() {
    return typeof this.#time === "string"
      ? Seconds.fromString(this.#time)
      : new Seconds(this.#time);
  }
  get minutes() {
    return new Seconds(this.seconds * 60);
  }
  get hours() {
    return new Seconds(this.seconds * 60 * 60);
  }
  get days() {
    return new Seconds(this.seconds * 60 * 60 * 24);
  }
  toString() {
    return this.seconds.toString();
  }
  valueOf() {
    return this.seconds.valueOf();
  }
}

const aliases = {
  milliseconds: "ms",
  seconds: "s",
  minutes: "m",
  hours: "h",
  days: "d",
};
Object_.setAlias(Time.prototype, aliases);
Object_.setAlias(Seconds.prototype, aliases);

export const time = factory(Time);
export const seconds = factory(Seconds);
export { Time, Seconds };
export default Time;
