import delay from "../delay/mod.js";

export const keepAwake = async function (
  ms = 4.7 * 60 * 1000,
  url = `http://${Deno.env.get("PROJECT_DOMAIN")}.glitch.me`,
  abortSignal = new AbortController().signal,
) {
  try {
    const signalPromise = new Promise((resolve) => {
      abortSignal.addEventListener("abort", resolve);
    });
    while (!abortSignal.aborted) {
      await fetch(url, {
        signal: abortSignal,
      })
        .then(() => console.log("[keepAwake] A self request has been made!"))
        .catch(console.error);
      await Promise.race([delay(ms), signalPromise]);
    }
  } catch (err) {
    console.error(err);
  }
};

class KeepAwake {
  constructor(milliseconds = 4.7 * 60 * 1000, url) {
    this.ms = milliseconds;
    this.url = url;
    this.abortController = null;
  }

  start() {
    console.log("[KeepAwake] start method called");
    this.abortController = new AbortController();
    keepAwake(this.ms, this.url, this.abortController.signal);
    return this;
  }

  stop() {
    console.log("[KeepAwake] stop method called");
    this.abortController?.abort();
    return this;
  }
}

export default KeepAwake;
