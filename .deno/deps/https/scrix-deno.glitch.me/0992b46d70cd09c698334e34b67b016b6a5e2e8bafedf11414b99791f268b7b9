import { factory } from "../class/mod.js";

class Object_ {
  constructor(obj) {
    this.obj = obj;
  }

  filter(filterFn = (key, value) => true) {
    const filteredObj = {};
    for (const [key, value] of Object.entries(this.obj)) {
      if (filterFn(key, value)) filteredObj[key] = value;
    }
    return filteredObj;
  }
  
  static setAlias(obj, aliases = {}) {
    for (const [key, alias] of Object.entries(aliases)) {
      const descriptor = Object.getOwnPropertyDescriptor(obj, key);
      if (Array.isArray(alias))
        for (const a of alias)
          Object.defineProperty(obj, a, descriptor);
      else
        Object.defineProperty(obj, alias, descriptor);
    }
  }
}

export const filter = function (obj, filterFn = (key, value) => true) {
  const filteredObj = {};
  for (const [key, value] of Object.entries(obj)) {
    if (filterFn(key, value)) filteredObj[key] = value;
  }
  return filteredObj;
};

export const object = factory(Object_);
export default Object_;