const replitDB = {
    _DB_URL: Deno.env.get("REPLIT_DB_URL"),
    get DB_URL () {
        if (this._DB_URL) {
            return this._DB_URL;
        }
        throw new Error("REPLIT_DB_URL is not available as an enviroment variable");
    },
    async set (key, value) {
        const params = new URLSearchParams();
        params.set(key, value);
        const response = await fetch(this.DB_URL, {
            method: "POST",
            body: params
        });
        return response.status === 200 ? true : false;
    },
    async get (key) {
        const response = await fetch(`${this.DB_URL}/${key}`, {
            method: "GET"
        });
        if (response.status === 200) {
            return response.text();
        }
    },
    async delete (key) {
        const response = await fetch(`${this.DB_URL}/${key}`, {
            method: "DELETE"
        });
        return response.status === 204 ? true : false;
    }
};
Object.freeze(replitDB);
if (import.meta.main) {
    const { parse  } = await import("https://deno.land/std@0.90.0/flags/mod.ts");
    const args = parse(Deno.args, {
        boolean: [
            "delete"
        ],
        alias: {
            delete: "d"
        }
    });
    const key = String(args._[0]);
    const value = String(args._[1]);
    switch(args._.length){
        case 1:
            if (args.delete) {
                console.log(await replitDB.delete(key));
            } else {
                console.log(await replitDB.get(key));
            }
            break;
        case 2:
            console.log(await replitDB.set(key, value));
            break;
    }
}
export default replitDB;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjxmaWxlOi8vL2hvbWUvcnVubmVyL2Rlbm8vbW9kdWxlcy9yZXBsaXRfZGIudHM+Il0sInNvdXJjZXNDb250ZW50IjpbInR5cGUgTWF5YmVTdHJpbmcgPSBzdHJpbmcgfCB1bmRlZmluZWQ7XG5pbnRlcmZhY2UgUmVwbGl0REJJbnRlcmZhY2Uge1xuICBfREJfVVJMOiBNYXliZVN0cmluZztcbiAgREJfVVJMOiBzdHJpbmc7XG4gIHNldChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj47XG4gIGdldChrZXk6IHN0cmluZyk6IFByb21pc2U8TWF5YmVTdHJpbmc+O1xuICBkZWxldGUoa2V5OiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+O1xufVxuY29uc3QgcmVwbGl0REI6IFJlcGxpdERCSW50ZXJmYWNlID0ge1xuICBfREJfVVJMOiBEZW5vLmVudi5nZXQoXCJSRVBMSVRfREJfVVJMXCIpLFxuICBnZXQgREJfVVJMKCkge1xuICAgIGlmICh0aGlzLl9EQl9VUkwpIHtcbiAgICAgIHJldHVybiB0aGlzLl9EQl9VUkw7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIlJFUExJVF9EQl9VUkwgaXMgbm90IGF2YWlsYWJsZSBhcyBhbiBlbnZpcm9tZW50IHZhcmlhYmxlXCIpO1xuICB9LFxuICBhc3luYyBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICBwYXJhbXMuc2V0KGtleSwgdmFsdWUpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godGhpcy5EQl9VUkwsIHsgbWV0aG9kOiBcIlBPU1RcIiwgYm9keTogcGFyYW1zIH0pO1xuICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMgPT09IDIwMCA/IHRydWUgOiBmYWxzZTtcbiAgfSxcbiAgYXN5bmMgZ2V0KGtleSkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7dGhpcy5EQl9VUkx9LyR7a2V5fWAsIHsgbWV0aG9kOiBcIkdFVFwiIH0pO1xuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLnRleHQoKTtcbiAgICB9XG4gIH0sXG4gIGFzeW5jIGRlbGV0ZShrZXkpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3RoaXMuREJfVVJMfS8ke2tleX1gLCB7IG1ldGhvZDogXCJERUxFVEVcIiB9KTtcbiAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzID09PSAyMDQgPyB0cnVlIDogZmFsc2U7XG4gIH0sXG59O1xuT2JqZWN0LmZyZWV6ZShyZXBsaXREQik7XG5cbmlmIChpbXBvcnQubWV0YS5tYWluKSB7XG4gIGNvbnN0IHsgcGFyc2UgfSA9IGF3YWl0IGltcG9ydChcImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjkwLjAvZmxhZ3MvbW9kLnRzXCIpO1xuICBjb25zdCBhcmdzID0gcGFyc2UoRGVuby5hcmdzLCB7XG4gICAgYm9vbGVhbjogW1wiZGVsZXRlXCJdLFxuICAgIGFsaWFzOiB7IGRlbGV0ZTogXCJkXCIgfSxcbiAgfSk7XG4gIGNvbnN0IGtleSA9IFN0cmluZyhhcmdzLl9bMF0pO1xuICBjb25zdCB2YWx1ZSA9IFN0cmluZyhhcmdzLl9bMV0pO1xuICBzd2l0Y2ggKGFyZ3MuXy5sZW5ndGgpIHtcbiAgICBjYXNlIDE6XG4gICAgICBpZiAoYXJncy5kZWxldGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coYXdhaXQgcmVwbGl0REIuZGVsZXRlKGtleSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coYXdhaXQgcmVwbGl0REIuZ2V0KGtleSkpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyOlxuICAgICAgY29uc29sZS5sb2coYXdhaXQgcmVwbGl0REIuc2V0KGtleSwgdmFsdWUpKTtcbiAgICAgIGJyZWFrO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlcGxpdERCO1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJNQVFBLFFBQUE7QUFDQSxXQUFBLEVBQUEsSUFBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLEVBQUEsYUFBQTtRQUNBLE1BQUE7aUJBQ0EsT0FBQTt3QkFDQSxPQUFBOztrQkFFQSxLQUFBLEVBQUEsd0RBQUE7O1VBRUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBO2NBQ0EsTUFBQSxPQUFBLGVBQUE7QUFDQSxjQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsRUFBQSxLQUFBO2NBQ0EsUUFBQSxTQUFBLEtBQUEsTUFBQSxNQUFBO0FBQUEsa0JBQUEsR0FBQSxJQUFBO0FBQUEsZ0JBQUEsRUFBQSxNQUFBOztlQUNBLFFBQUEsQ0FBQSxNQUFBLEtBQUEsR0FBQSxHQUFBLElBQUEsR0FBQSxLQUFBOztVQUVBLEdBQUEsRUFBQSxHQUFBO2NBQ0EsUUFBQSxTQUFBLEtBQUEsU0FBQSxNQUFBLENBQUEsQ0FBQSxFQUFBLEdBQUE7QUFBQSxrQkFBQSxHQUFBLEdBQUE7O1lBQ0EsUUFBQSxDQUFBLE1BQUEsS0FBQSxHQUFBO21CQUNBLFFBQUEsQ0FBQSxJQUFBOzs7VUFHQSxNQUFBLEVBQUEsR0FBQTtjQUNBLFFBQUEsU0FBQSxLQUFBLFNBQUEsTUFBQSxDQUFBLENBQUEsRUFBQSxHQUFBO0FBQUEsa0JBQUEsR0FBQSxNQUFBOztlQUNBLFFBQUEsQ0FBQSxNQUFBLEtBQUEsR0FBQSxHQUFBLElBQUEsR0FBQSxLQUFBOzs7QUFHQSxNQUFBLENBQUEsTUFBQSxDQUFBLFFBQUE7SUFFQSxNQUFBLENBQUEsSUFBQSxDQUFBLElBQUE7WUFDQSxLQUFBLFlBQUEsTUFBQSxFQUFBLHlDQUFBO1VBQ0EsSUFBQSxHQUFBLEtBQUEsQ0FBQSxJQUFBLENBQUEsSUFBQTtBQUNBLGVBQUE7YUFBQSxNQUFBOztBQUNBLGFBQUE7QUFBQSxrQkFBQSxHQUFBLENBQUE7OztVQUVBLEdBQUEsR0FBQSxNQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBO1VBQ0EsS0FBQSxHQUFBLE1BQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxDQUFBLENBQUE7V0FDQSxJQUFBLENBQUEsQ0FBQSxDQUFBLE1BQUE7YUFDQSxDQUFBO2dCQUNBLElBQUEsQ0FBQSxNQUFBO0FBQ0EsdUJBQUEsQ0FBQSxHQUFBLE9BQUEsUUFBQSxDQUFBLE1BQUEsQ0FBQSxHQUFBOztBQUVBLHVCQUFBLENBQUEsR0FBQSxPQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQTs7O2FBR0EsQ0FBQTtBQUNBLG1CQUFBLENBQUEsR0FBQSxPQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxFQUFBLEtBQUE7Ozs7ZUFLQSxRQUFBIn0=